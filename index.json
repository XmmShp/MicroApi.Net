{
  "CONTRIBUTING.html": {
    "href": "CONTRIBUTING.html",
    "title": "Contributing Guidelines / 贡献指南 | MicroAPI.Net",
    "summary": "Contributing Guidelines / 贡献指南 English | 中文 English Thank you for considering contributing to the MicroAPI.Net project! Here are some guidelines to help you get involved. Code of Conduct Please respect all project participants and maintain a professional and friendly communication environment. How to Contribute Reporting Issues If you find a bug or have a feature request, please submit it through GitHub Issues, ensuring that you: Check if the same or similar issue already exists Use a clear title to describe the issue Provide detailed steps to reproduce the issue or use cases for feature requests Include code examples or screenshots if possible Submitting Code Fork the repository and create your branch Write code and add tests Ensure all tests pass Submit your code and create a Pull Request Pull Request Process Update your codebase to include the latest changes from the main branch Follow the project's code style and naming conventions Describe your changes in detail in the PR description Link related issues (if any) Development Environment Setup Clone the repository git clone https://github.com/XmmShp/MicroAPI.Net.git cd MicroAPI.Net Build the project dotnet build Coding Standards Follow C# coding conventions Use meaningful variable and function names Add XML documentation comments for public APIs Keep code concise and follow the Single Responsibility Principle Commit Message Guidelines Commit messages should clearly describe the changes. We recommend using the following format: <type>: <description> [optional detailed description] [optional reference to related issues] Types can be: feat: New feature fix: Bug fix docs: Documentation changes style: Code style adjustments (not affecting functionality) refactor: Code refactoring test: Adding or modifying tests chore: Changes to build process or auxiliary tools For example: feat: add custom route prefix support Added ability to set route prefix in HttpFacade attribute, allowing developers to set a base path for the entire controller. Closes #123 Release Process Project maintainers are responsible for releases. Version numbers follow Semantic Versioning standards. License By contributing your code, you agree that your contributions will be licensed under the project's MIT License. 中文 感谢您考虑为 MicroAPI.Net 项目做出贡献！以下是一些指导方针，帮助您参与到项目中来。 行为准则 请尊重所有项目参与者，保持专业和友好的交流环境。 如何贡献 报告问题 如果您发现了问题或有功能请求，请通过 GitHub Issues 提交，并确保： 检查是否已存在相同或相似的问题 使用清晰的标题描述问题 详细描述问题的复现步骤或功能请求的用例 如果可能，提供代码示例或截图 提交代码 Fork 仓库并创建您的分支 编写代码并添加测试 确保所有测试通过 提交代码并创建 Pull Request Pull Request 流程 更新您的代码库以包含最新的主分支更改 遵循项目的代码风格和命名约定 在 PR 描述中详细说明您的更改 链接相关的 issue（如果有） 开发环境设置 克隆仓库 git clone https://github.com/XmmShp/MicroAPI.Net.git cd MicroAPI.Net 构建项目 dotnet build 代码规范 遵循 C# 编码规范 使用有意义的变量和函数名 为公共 API 添加 XML 文档注释 保持代码简洁，遵循单一职责原则 提交信息规范 提交信息应该清晰描述更改内容，建议使用以下格式： <类型>: <描述> [可选的详细描述] [可选的引用相关 issue] 类型可以是： feat: 新功能 fix: 修复 bug docs: 文档更改 style: 代码风格调整（不影响代码功能） refactor: 代码重构 test: 添加或修改测试 chore: 构建过程或辅助工具的变动 例如： feat: 添加自定义路由前缀支持 增加了在 HttpFacade 特性中设置路由前缀的功能， 允许开发者为整个控制器设置基础路径。 Closes #123 发布流程 项目维护者负责版本发布。版本号遵循 语义化版本 规范。 许可证 通过贡献您的代码，您同意您的贡献将在项目的 MIT 许可证下发布。"
  },
  "README-zh-cn.html": {
    "href": "README-zh-cn.html",
    "title": "MicroAPI.Net | MicroAPI.Net",
    "summary": "MicroAPI.Net MicroAPI.Net 是一个轻量级的 .NET 源代码生成器，用于从接口和外观类自动生成 ASP.NET Core 控制器。通过使用简单的特性标记，您可以快速创建 RESTful API，而无需手动编写重复的控制器代码。 特性 \uD83D\uDE80 零样板代码 - 从接口或外观类自动生成控制器 \uD83D\uDD04 实时生成 - 在编译时生成代码，无运行时开销 \uD83D\uDEE0️ 高度可配置 - 自定义控制器名称、路由和命名空间 \uD83D\uDCE6 轻量级 - 最小化依赖，专注于单一职责 \uD83D\uDD0D 类型安全 - 利用编译时类型检查确保 API 一致性 安装 通过 NuGet 包管理器安装： dotnet add package MicroAPI.Net 快速入门 1. 创建服务接口 public interface IUserService { Task<User> GetUserAsync(int id); Task<List<User>> GetAllUsersAsync(); Task<User> CreateUserAsync(string name, int age); Task<bool> DeleteUserAsync(int id); } 2. 实现服务 public class UserService : IUserService { // 实现接口方法 } 3. 创建外观类或使用接口标记 选项 1: 使用外观类 [HttpFacade(\"User\")] public class UserServiceFacade : IUserService { [Get(\"{id}\")] public Task<User> GetUserAsync(int id) => null!; [Get(\"\")] public Task<List<User>> GetAllUsersAsync() => null!; [Post] public Task<User> CreateUserAsync(string name, int age) => null!; [Delete(\"{id}\", MethodName = \"MyDeleteUser\")] public bool DeleteUser(int id) => false; public void Debug() { } } 生成的代码： // UserController.g.cs using Microsoft.AspNetCore.Mvc; using System; using System.Threading.Tasks; namespace MicroAPI.Sample.Facades.Controllers { [ApiController] [Route(\"[controller]\")] public class UserController : ControllerBase { private readonly MicroAPI.Sample.Services.IUserService _service; public UserController(MicroAPI.Sample.Services.IUserService service) { _service = service; } [HttpGet(\"{id}\")] public System.Threading.Tasks.Task<MicroAPI.Sample.Models.User> GetUserAsync([FromRoute] int id) => _service.GetUserAsync(id); [HttpGet(\"\")] public System.Threading.Tasks.Task<System.Collections.Generic.List<MicroAPI.Sample.Models.User>> GetAllUsersAsync() => _service.GetAllUsersAsync(); [HttpPost(\"CreateUserAsync\")] public System.Threading.Tasks.Task<MicroAPI.Sample.Models.User> CreateUserAsync([FromBody] CreateUserAsyncRequest request) => _service.CreateUserAsync(request.name, request.age); [HttpDelete(\"{id}\")] public bool MyDeleteUser([FromRoute] int id) => _service.DeleteUser(id); } } // UserDtos.g.cs using System; namespace MicroAPI.Sample.Facades.Controllers { public record CreateUserAsyncRequest(string name, int age); } 选项 2: 使用接口 [HttpFacade(DtoNamespace = \"MyApp.Api.Models\")] public interface IUserService { [Get(\"{id}\")] Task<User> GetUserAsync(int id); [Get(\"\")] Task<List<User>> GetAllUsersAsync(); [Post] Task<User> CreateUserAsync(string name, int age); [Delete(\"{id}\", MethodName = \"MyDeleteUser\")] bool DeleteUser(int id); void Debug(); } 生成的代码： // UserServiceController.g.cs using Microsoft.AspNetCore.Mvc; using System; using System.Threading.Tasks; using MyApp.Api.Models; namespace MicroAPI.Sample.Services.Controllers { [ApiController] [Route(\"[controller]\")] public class UserServiceController : ControllerBase { private readonly MicroAPI.Sample.Services.IUserService _service; public UserServiceController(MicroAPI.Sample.Services.IUserService service) { _service = service; } [HttpGet(\"{id}\")] public System.Threading.Tasks.Task<MicroAPI.Sample.Models.User> GetUserAsync([FromRoute] int id) => _service.GetUserAsync(id); [HttpGet(\"\")] public System.Threading.Tasks.Task<System.Collections.Generic.List<MicroAPI.Sample.Models.User>> GetAllUsersAsync() => _service.GetAllUsersAsync(); [HttpPost(\"CreateUserAsync\")] public System.Threading.Tasks.Task<MicroAPI.Sample.Models.User> CreateUserAsync([FromBody] CreateUserAsyncRequest request) => _service.CreateUserAsync(request.name, request.age); [HttpDelete(\"{id}\")] public bool MyDeleteUser([FromRoute] int id) => _service.DeleteUser(id); } } // UserServiceDtos.g.cs using System; namespace MyApp.Api.Models { public record CreateUserAsyncRequest(string name, int age); } 高级配置 自定义控制器名称 [HttpFacade(\"CustomName\")] public interface IUserService { ... } 自定义命名空间 [HttpFacade(ControllerNamespace = \"MyApp.Api.Controllers\", DtoNamespace = \"MyApp.Api.Models\")] public interface IUserService { ... } 自定义方法名称 [Get(MethodName = \"FindById\")] Task<User> GetUserAsync(int id); 背景与动机 随着微服务、领域驱动设计（DDD）等架构的流行，Controller 层变得越来越薄，甚至在某些微服务群中还会配置统一网关和中间件处理返回。在这些系统中，往往每个端点就是对一个 Service 的简单转发，它们不再严格遵循 RESTful 的约定，更不会充分利用 HttpStatusCode 的语义，或者说 HttpStatusCode 的语义不足以表达丰富的业务场景，这些 API 更像是 WebRPC。 在这些背景下，MicroAPI.Net 应运而生。它旨在解决以下 ASP.NET Core API 开发中的常见挑战： 重复的控制器代码：传统的 API 控制器通常包含大量重复的样板代码，这些代码仅仅是将请求转发到服务层。 关注点分离：使用标准控制器模式时，维护 API 契约和业务逻辑实现之间的清晰分离是具有挑战性的。 API 一致性：在没有标准化方法的情况下，确保多个控制器和端点之间的 API 设计一致性可能很困难。 维护成本：服务接口的更改通常需要对应的控制器代码更改，这可能导致潜在的不一致性。 MicroAPI.Net 通过从服务接口或外观类自动生成控制器代码来解决这些问题，确保 API 层准确反映服务契约，同时消除样板代码。 贡献 欢迎贡献！请查看 贡献指南 了解详情。 许可证 本项目采用 MIT 许可证 - 详情请参阅 LICENSE 文件。"
  },
  "README.html": {
    "href": "README.html",
    "title": "MicroAPI.Net | MicroAPI.Net",
    "summary": "MicroAPI.Net Read this in other languages: 简体中文 MicroAPI.Net is a lightweight .NET source generator that automatically creates ASP.NET Core controllers from interfaces and facade classes. With simple attribute annotations, you can quickly build RESTful APIs without writing repetitive controller code. Features \uD83D\uDE80 Zero Boilerplate - Automatically generate controllers from interfaces or facade classes \uD83D\uDD04 Compile-time Generation - Generate code at compile time with no runtime overhead \uD83D\uDEE0️ Highly Configurable - Customize controller names, routes, and namespaces \uD83D\uDCE6 Lightweight - Minimal dependencies, focused on a single responsibility \uD83D\uDD0D Type-safe - Leverage compile-time type checking for API consistency Installation Install via NuGet Package Manager: dotnet add package MicroAPI.Net Quick Start 1. Create a Service Interface public interface IUserService { Task<User> GetUserAsync(int id); Task<List<User>> GetAllUsersAsync(); Task<User> CreateUserAsync(string name, int age); Task<bool> DeleteUserAsync(int id); } 2. Implement the Service public class UserService : IUserService { // Implement interface methods } 3. Create a Facade Class or Use Interface Annotations Option 1: Using a Facade Class [HttpFacade(\"User\")] public class UserServiceFacade : IUserService { [Get(\"{id}\")] public Task<User> GetUserAsync(int id) => null!; [Get(\"\")] public Task<List<User>> GetAllUsersAsync() => null!; [Post] public Task<User> CreateUserAsync(string name, int age) => null!; [Delete(\"{id}\", MethodName = \"MyDeleteUser\")] public bool DeleteUser(int id) => false; public void Debug() { } } Generated code: // UserController.g.cs using Microsoft.AspNetCore.Mvc; using System; using System.Threading.Tasks; namespace MicroAPI.Sample.Facades.Controllers { [ApiController] [Route(\"[controller]\")] public class UserController : ControllerBase { private readonly MicroAPI.Sample.Services.IUserService _service; public UserController(MicroAPI.Sample.Services.IUserService service) { _service = service; } [HttpGet(\"{id}\")] public System.Threading.Tasks.Task<MicroAPI.Sample.Models.User> GetUserAsync([FromRoute] int id) => _service.GetUserAsync(id); [HttpGet(\"\")] public System.Threading.Tasks.Task<System.Collections.Generic.List<MicroAPI.Sample.Models.User>> GetAllUsersAsync() => _service.GetAllUsersAsync(); [HttpPost(\"CreateUserAsync\")] public System.Threading.Tasks.Task<MicroAPI.Sample.Models.User> CreateUserAsync([FromBody] CreateUserAsyncRequest request) => _service.CreateUserAsync(request.name, request.age); [HttpDelete(\"{id}\")] public bool MyDeleteUser([FromRoute] int id) => _service.DeleteUser(id); } } // UserDtos.g.cs using System; namespace MicroAPI.Sample.Facades.Controllers { public record CreateUserAsyncRequest(string name, int age); } Option 2: Using an Interface [HttpFacade(DtoNamespace = \"MyApp.Api.Models\")] public interface IUserService { [Get(\"{id}\")] Task<User> GetUserAsync(int id); [Get(\"\")] Task<List<User>> GetAllUsersAsync(); [Post] Task<User> CreateUserAsync(string name, int age); [Delete(\"{id}\", MethodName = \"MyDeleteUser\")] bool DeleteUser(int id); void Debug(); } Generated code: // UserServiceController.g.cs using Microsoft.AspNetCore.Mvc; using System; using System.Threading.Tasks; using MyApp.Api.Models; namespace MicroAPI.Sample.Services.Controllers { [ApiController] [Route(\"[controller]\")] public class UserServiceController : ControllerBase { private readonly MicroAPI.Sample.Services.IUserService _service; public UserServiceController(MicroAPI.Sample.Services.IUserService service) { _service = service; } [HttpGet(\"{id}\")] public System.Threading.Tasks.Task<MicroAPI.Sample.Models.User> GetUserAsync([FromRoute] int id) => _service.GetUserAsync(id); [HttpGet(\"\")] public System.Threading.Tasks.Task<System.Collections.Generic.List<MicroAPI.Sample.Models.User>> GetAllUsersAsync() => _service.GetAllUsersAsync(); [HttpPost(\"CreateUserAsync\")] public System.Threading.Tasks.Task<MicroAPI.Sample.Models.User> CreateUserAsync([FromBody] CreateUserAsyncRequest request) => _service.CreateUserAsync(request.name, request.age); [HttpDelete(\"{id}\")] public bool MyDeleteUser([FromRoute] int id) => _service.DeleteUser(id); } } // UserServiceDtos.g.cs using System; namespace MyApp.Api.Models { public record CreateUserAsyncRequest(string name, int age); } Advanced Configuration Custom Controller Name [HttpFacade(\"CustomName\")] public interface IUserService { ... } Custom Namespaces [HttpFacade(ControllerNamespace = \"MyApp.Api.Controllers\", DtoNamespace = \"MyApp.Api.Models\")] public interface IUserService { ... } Custom Method Name [Get(MethodName = \"FindById\")] Task<User> GetUserAsync(int id); Background and Motivation With the rise of microservices, Domain-Driven Design (DDD), and similar architectures, Controller layers have become increasingly thin. In some microservice clusters, unified gateways and middleware handle responses. In these systems, each endpoint often simply forwards requests to a Service, no longer strictly following RESTful conventions or fully utilizing HttpStatusCode semantics. In fact, HttpStatusCode semantics are often insufficient to express rich business scenarios, making these APIs more like WebRPC. MicroAPI.Net was created to address these challenges in ASP.NET Core API development: Repetitive Controller Code: Traditional API controllers often contain significant boilerplate code that merely forwards requests to the service layer. Separation of Concerns: Maintaining a clear separation between API contracts and business logic implementation is challenging with standard controller patterns. API Consistency: Ensuring consistent API design across multiple controllers and endpoints is difficult without standardized approaches. Maintenance Cost: Changes to service interfaces typically require corresponding controller code changes, potentially leading to inconsistencies. MicroAPI.Net addresses these issues by automatically generating controller code from service interfaces or facade classes, ensuring the API layer accurately reflects service contracts while eliminating boilerplate code. Contributing Contributions are welcome! Please see the Contributing Guidelines for details. License This project is licensed under the MIT License - see the LICENSE file for details."
  },
  "api/MicroAPI.ControllerGenerator.html": {
    "href": "api/MicroAPI.ControllerGenerator.html",
    "title": "Class ControllerGenerator | MicroAPI.Net",
    "summary": "Class ControllerGenerator Inheritance object ControllerGenerator Implements IIncrementalGenerator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: MicroAPI Assembly: MicroAPI.dll Syntax [Generator] public class ControllerGenerator : IIncrementalGenerator Fields | Edit this page View Source AsyncSuffix Declaration public const string AsyncSuffix = \"Async\" Field Value Type Description string | Edit this page View Source FacadeSyntaxName Declaration public const string FacadeSyntaxName = \"HttpFacade\" Field Value Type Description string Methods | Edit this page View Source Initialize(IncrementalGeneratorInitializationContext) Called to initialize the generator and register generation steps via callbacks on the context Declaration public void Initialize(IncrementalGeneratorInitializationContext context) Parameters Type Name Description IncrementalGeneratorInitializationContext context The IncrementalGeneratorInitializationContext to register callbacks on Implements IIncrementalGenerator"
  },
  "api/MicroAPI.DeleteAttribute.html": {
    "href": "api/MicroAPI.DeleteAttribute.html",
    "title": "Class DeleteAttribute | MicroAPI.Net",
    "summary": "Class DeleteAttribute Marks a method to be exposed as an HTTP DELETE endpoint. Inheritance object Attribute HttpMethodAttributeBase DeleteAttribute Inherited Members HttpMethodAttributeBase.MethodName HttpMethodAttributeBase.Route Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: MicroAPI Assembly: MicroAPI.dll Syntax public class DeleteAttribute : HttpMethodAttributeBase Constructors | Edit this page View Source DeleteAttribute() Initializes a new instance of the DeleteAttribute class. Declaration public DeleteAttribute() | Edit this page View Source DeleteAttribute(string) Initializes a new instance of the DeleteAttribute class with a custom route. Declaration public DeleteAttribute(string route) Parameters Type Name Description string route The route template for the endpoint."
  },
  "api/MicroAPI.DtoAttribute-1.html": {
    "href": "api/MicroAPI.DtoAttribute-1.html",
    "title": "Class DtoAttribute<TEntity> | MicroAPI.Net",
    "summary": "Class DtoAttribute<TEntity> Marks a class as a Data Transfer Object (Dto) and specifies the entity type it maps to. Inheritance object Attribute DtoAttribute DtoAttribute<TEntity> Inherited Members DtoAttribute.EntityType DtoAttribute.IgnoredProperties DtoAttribute.IgnoredAttributes Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: MicroAPI Assembly: MicroAPI.dll Syntax [AttributeUsage(AttributeTargets.Class, Inherited = false)] public class DtoAttribute<TEntity> : DtoAttribute where TEntity : class Type Parameters Name Description TEntity The entity type that this Dto maps to. Constructors | Edit this page View Source DtoAttribute() Initializes a new instance of the DtoAttribute<TEntity> class. Declaration public DtoAttribute()"
  },
  "api/MicroAPI.DtoAttribute.html": {
    "href": "api/MicroAPI.DtoAttribute.html",
    "title": "Class DtoAttribute | MicroAPI.Net",
    "summary": "Class DtoAttribute Marks a class as a Data Transfer Object (Dto) and specifies the entity type it maps to. Inheritance object Attribute DtoAttribute DtoAttribute<TEntity> Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: MicroAPI Assembly: MicroAPI.dll Syntax [AttributeUsage(AttributeTargets.Class, Inherited = false)] public class DtoAttribute : Attribute Constructors | Edit this page View Source DtoAttribute(Type) Initializes a new instance of the DtoAttribute class. Declaration public DtoAttribute(Type entityType) Parameters Type Name Description Type entityType The entity type that this Dto maps to. Properties | Edit this page View Source EntityType Gets the entity type that this Dto maps to. Declaration public Type EntityType { get; } Property Value Type Description Type | Edit this page View Source IgnoredAttributes Gets or sets the attribute types to ignore when generating the Dto. If a base attribute type is specified (e.g., typeof(Attribute)), all derived attributes will also be ignored. Declaration public Type[]? IgnoredAttributes { get; set; } Property Value Type Description Type[] | Edit this page View Source IgnoredProperties Gets or sets the properties to ignore when generating the Dto. Declaration public string[]? IgnoredProperties { get; set; } Property Value Type Description string[]"
  },
  "api/MicroAPI.DtoGenerator.html": {
    "href": "api/MicroAPI.DtoGenerator.html",
    "title": "Class DtoGenerator | MicroAPI.Net",
    "summary": "Class DtoGenerator Inheritance object DtoGenerator Implements IIncrementalGenerator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: MicroAPI Assembly: MicroAPI.dll Syntax [Generator] public class DtoGenerator : IIncrementalGenerator Methods | Edit this page View Source Initialize(IncrementalGeneratorInitializationContext) Called to initialize the generator and register generation steps via callbacks on the context Declaration public void Initialize(IncrementalGeneratorInitializationContext context) Parameters Type Name Description IncrementalGeneratorInitializationContext context The IncrementalGeneratorInitializationContext to register callbacks on Implements IIncrementalGenerator"
  },
  "api/MicroAPI.GeneratorHelper.html": {
    "href": "api/MicroAPI.GeneratorHelper.html",
    "title": "Class GeneratorHelper | MicroAPI.Net",
    "summary": "Class GeneratorHelper Inheritance object GeneratorHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: MicroAPI Assembly: MicroAPI.dll Syntax public static class GeneratorHelper Methods | Edit this page View Source FormatArgument(TypedConstant) Formats a TypedConstant into a string representation. Declaration public static string FormatArgument(TypedConstant arg) Parameters Type Name Description TypedConstant arg The TypedConstant to format. Returns Type Description string A string representation of the TypedConstant. Exceptions Type Condition ArgumentOutOfRangeException Thrown when the TypedConstant kind is not supported. | Edit this page View Source GetConstructorArgument(AttributeData, int) Gets the constructor argument value from an attribute data. Declaration public static string? GetConstructorArgument(AttributeData attribute, int index) Parameters Type Name Description AttributeData attribute The attribute data to get the constructor argument from. int index The index of the constructor argument to get. Returns Type Description string The constructor argument value as a string, or null if the index is out of range. | Edit this page View Source GetTypeName(ITypeSymbol) Gets the type name of the given type symbol, including nullable annotations and generic type arguments. Declaration public static string GetTypeName(ITypeSymbol typeSymbol) Parameters Type Name Description ITypeSymbol typeSymbol The type symbol to get the name for. Returns Type Description string The type name as a string. | Edit this page View Source ToPascalCase(string) Converts a string to PascalCase (first letter uppercase, rest preserved) Declaration public static string ToPascalCase(string input) Parameters Type Name Description string input Returns Type Description string"
  },
  "api/MicroAPI.GetAttribute.html": {
    "href": "api/MicroAPI.GetAttribute.html",
    "title": "Class GetAttribute | MicroAPI.Net",
    "summary": "Class GetAttribute Marks a method to be exposed as an HTTP GET endpoint. Inheritance object Attribute HttpMethodAttributeBase GetAttribute Inherited Members HttpMethodAttributeBase.MethodName HttpMethodAttributeBase.Route Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: MicroAPI Assembly: MicroAPI.dll Syntax public class GetAttribute : HttpMethodAttributeBase Constructors | Edit this page View Source GetAttribute() Initializes a new instance of the GetAttribute class. Declaration public GetAttribute() | Edit this page View Source GetAttribute(string) Initializes a new instance of the GetAttribute class with a custom route. Declaration public GetAttribute(string route) Parameters Type Name Description string route The route template for the endpoint."
  },
  "api/MicroAPI.HttpFacadeAttribute-1.html": {
    "href": "api/MicroAPI.HttpFacadeAttribute-1.html",
    "title": "Class HttpFacadeAttribute<TService> | MicroAPI.Net",
    "summary": "Class HttpFacadeAttribute<TService> Marks a class or interface for generating a controller. Inheritance object Attribute HttpFacadeAttribute HttpFacadeAttribute<TService> Inherited Members HttpFacadeAttribute.Service Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: MicroAPI Assembly: MicroAPI.dll Syntax [AttributeUsage(AttributeTargets.Class|AttributeTargets.Interface, Inherited = false)] public class HttpFacadeAttribute<TService> : HttpFacadeAttribute where TService : class Type Parameters Name Description TService The service type that the facade implements. Constructors | Edit this page View Source HttpFacadeAttribute() Initializes a new instance of the HttpFacadeAttribute<TService> class. Declaration public HttpFacadeAttribute()"
  },
  "api/MicroAPI.HttpFacadeAttribute.html": {
    "href": "api/MicroAPI.HttpFacadeAttribute.html",
    "title": "Class HttpFacadeAttribute | MicroAPI.Net",
    "summary": "Class HttpFacadeAttribute Marks a class or interface for generating a controller. Inheritance object Attribute HttpFacadeAttribute HttpFacadeAttribute<TService> Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: MicroAPI Assembly: MicroAPI.dll Syntax [AttributeUsage(AttributeTargets.Class|AttributeTargets.Interface, Inherited = false)] public class HttpFacadeAttribute : Attribute Constructors | Edit this page View Source HttpFacadeAttribute() Initializes a new instance of the HttpFacadeAttribute class. Declaration public HttpFacadeAttribute() Properties | Edit this page View Source Service Gets or sets the service type that the facade implements. This is only needed when applying the attribute to a class that doesn't implement the service interface directly. Declaration public Type? Service { get; set; } Property Value Type Description Type"
  },
  "api/MicroAPI.HttpMethodAttributeBase.html": {
    "href": "api/MicroAPI.HttpMethodAttributeBase.html",
    "title": "Class HttpMethodAttributeBase | MicroAPI.Net",
    "summary": "Class HttpMethodAttributeBase Base class for HTTP method attributes. Inheritance object Attribute HttpMethodAttributeBase DeleteAttribute GetAttribute PatchAttribute PostAttribute PutAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: MicroAPI Assembly: MicroAPI.dll Syntax [AttributeUsage(AttributeTargets.Method, Inherited = false)] public abstract class HttpMethodAttributeBase : Attribute Constructors | Edit this page View Source HttpMethodAttributeBase() Initializes a new instance of the HttpMethodAttributeBase class. Declaration protected HttpMethodAttributeBase() Properties | Edit this page View Source MethodName Gets or sets the name of the controller method to generate. If not specified, the original method name will be used. Declaration public string? MethodName { get; set; } Property Value Type Description string | Edit this page View Source Route Gets or sets the route template for the endpoint. If not specified, the original method name will be used as the route. Declaration public string? Route { get; protected set; } Property Value Type Description string"
  },
  "api/MicroAPI.PatchAttribute.html": {
    "href": "api/MicroAPI.PatchAttribute.html",
    "title": "Class PatchAttribute | MicroAPI.Net",
    "summary": "Class PatchAttribute Marks a method to be exposed as an HTTP PATCH endpoint. Inheritance object Attribute HttpMethodAttributeBase PatchAttribute Inherited Members HttpMethodAttributeBase.MethodName HttpMethodAttributeBase.Route Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: MicroAPI Assembly: MicroAPI.dll Syntax public class PatchAttribute : HttpMethodAttributeBase Constructors | Edit this page View Source PatchAttribute() Initializes a new instance of the PatchAttribute class. Declaration public PatchAttribute() | Edit this page View Source PatchAttribute(string) Initializes a new instance of the PatchAttribute class with a custom route. Declaration public PatchAttribute(string route) Parameters Type Name Description string route The route template for the endpoint."
  },
  "api/MicroAPI.PostAttribute.html": {
    "href": "api/MicroAPI.PostAttribute.html",
    "title": "Class PostAttribute | MicroAPI.Net",
    "summary": "Class PostAttribute Marks a method to be exposed as an HTTP POST endpoint. Inheritance object Attribute HttpMethodAttributeBase PostAttribute Inherited Members HttpMethodAttributeBase.MethodName HttpMethodAttributeBase.Route Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: MicroAPI Assembly: MicroAPI.dll Syntax public class PostAttribute : HttpMethodAttributeBase Constructors | Edit this page View Source PostAttribute() Initializes a new instance of the PostAttribute class. Declaration public PostAttribute() | Edit this page View Source PostAttribute(string) Initializes a new instance of the PostAttribute class with a custom route. Declaration public PostAttribute(string route) Parameters Type Name Description string route The route template for the endpoint."
  },
  "api/MicroAPI.PutAttribute.html": {
    "href": "api/MicroAPI.PutAttribute.html",
    "title": "Class PutAttribute | MicroAPI.Net",
    "summary": "Class PutAttribute Marks a method to be exposed as an HTTP PUT endpoint. Inheritance object Attribute HttpMethodAttributeBase PutAttribute Inherited Members HttpMethodAttributeBase.MethodName HttpMethodAttributeBase.Route Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: MicroAPI Assembly: MicroAPI.dll Syntax public class PutAttribute : HttpMethodAttributeBase Constructors | Edit this page View Source PutAttribute() Initializes a new instance of the PutAttribute class. Declaration public PutAttribute() | Edit this page View Source PutAttribute(string) Initializes a new instance of the PutAttribute class with a custom route. Declaration public PutAttribute(string route) Parameters Type Name Description string route The route template for the endpoint."
  },
  "api/MicroAPI.html": {
    "href": "api/MicroAPI.html",
    "title": "Namespace MicroAPI | MicroAPI.Net",
    "summary": "Namespace MicroAPI Classes ControllerGenerator DeleteAttribute Marks a method to be exposed as an HTTP DELETE endpoint. DtoAttribute Marks a class as a Data Transfer Object (Dto) and specifies the entity type it maps to. DtoAttribute<TEntity> Marks a class as a Data Transfer Object (Dto) and specifies the entity type it maps to. DtoGenerator GeneratorHelper GetAttribute Marks a method to be exposed as an HTTP GET endpoint. HttpFacadeAttribute Marks a class or interface for generating a controller. HttpFacadeAttribute<TService> Marks a class or interface for generating a controller. HttpMethodAttributeBase Base class for HTTP method attributes. PatchAttribute Marks a method to be exposed as an HTTP PATCH endpoint. PostAttribute Marks a method to be exposed as an HTTP POST endpoint. PutAttribute Marks a method to be exposed as an HTTP PUT endpoint."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "MicroAPI.Net API Documentation | MicroAPI.Net",
    "summary": "MicroAPI.Net API Documentation Welcome to the MicroAPI.Net API documentation. This documentation is automatically generated from the source code. Getting Started For more information, please visit the GitHub repository."
  },
  "index.html": {
    "href": "index.html",
    "title": "MicroAPI.Net | MicroAPI.Net",
    "summary": "MicroAPI.Net Read this in other languages: 简体中文 MicroAPI.Net is a lightweight .NET source generator that automatically creates ASP.NET Core controllers from interfaces and facade classes. With simple attribute annotations, you can quickly build RESTful APIs without writing repetitive controller code. Features \uD83D\uDE80 Zero Boilerplate - Automatically generate controllers from interfaces or facade classes \uD83D\uDD04 Compile-time Generation - Generate code at compile time with no runtime overhead \uD83D\uDEE0️ Highly Configurable - Customize controller names, routes, and namespaces \uD83D\uDCE6 Lightweight - Minimal dependencies, focused on a single responsibility \uD83D\uDD0D Type-safe - Leverage compile-time type checking for API consistency Installation Install via NuGet Package Manager: dotnet add package MicroAPI.Net Quick Start 1. Create a Service Interface public interface IUserService { Task<User> GetUserAsync(int id); Task<List<User>> GetAllUsersAsync(); Task<User> CreateUserAsync(string name, int age); Task<bool> DeleteUserAsync(int id); } 2. Implement the Service public class UserService : IUserService { // Implement interface methods } 3. Create a Facade Class or Use Interface Annotations Option 1: Using a Facade Class [HttpFacade(\"User\")] public class UserServiceFacade : IUserService { [Get(\"{id}\")] public Task<User> GetUserAsync(int id) => null!; [Get(\"\")] public Task<List<User>> GetAllUsersAsync() => null!; [Post] public Task<User> CreateUserAsync(string name, int age) => null!; [Delete(\"{id}\", MethodName = \"MyDeleteUser\")] public bool DeleteUser(int id) => false; public void Debug() { } } Generated code: // UserController.g.cs using Microsoft.AspNetCore.Mvc; using System; using System.Threading.Tasks; namespace MicroAPI.Sample.Facades.Controllers { [ApiController] [Route(\"[controller]\")] public class UserController : ControllerBase { private readonly MicroAPI.Sample.Services.IUserService _service; public UserController(MicroAPI.Sample.Services.IUserService service) { _service = service; } [HttpGet(\"{id}\")] public System.Threading.Tasks.Task<MicroAPI.Sample.Models.User> GetUserAsync([FromRoute] int id) => _service.GetUserAsync(id); [HttpGet(\"\")] public System.Threading.Tasks.Task<System.Collections.Generic.List<MicroAPI.Sample.Models.User>> GetAllUsersAsync() => _service.GetAllUsersAsync(); [HttpPost(\"CreateUserAsync\")] public System.Threading.Tasks.Task<MicroAPI.Sample.Models.User> CreateUserAsync([FromBody] CreateUserAsyncRequest request) => _service.CreateUserAsync(request.name, request.age); [HttpDelete(\"{id}\")] public bool MyDeleteUser([FromRoute] int id) => _service.DeleteUser(id); } } // UserDtos.g.cs using System; namespace MicroAPI.Sample.Facades.Controllers { public record CreateUserAsyncRequest(string name, int age); } Option 2: Using an Interface [HttpFacade(DtoNamespace = \"MyApp.Api.Models\")] public interface IUserService { [Get(\"{id}\")] Task<User> GetUserAsync(int id); [Get(\"\")] Task<List<User>> GetAllUsersAsync(); [Post] Task<User> CreateUserAsync(string name, int age); [Delete(\"{id}\", MethodName = \"MyDeleteUser\")] bool DeleteUser(int id); void Debug(); } Generated code: // UserServiceController.g.cs using Microsoft.AspNetCore.Mvc; using System; using System.Threading.Tasks; using MyApp.Api.Models; namespace MicroAPI.Sample.Services.Controllers { [ApiController] [Route(\"[controller]\")] public class UserServiceController : ControllerBase { private readonly MicroAPI.Sample.Services.IUserService _service; public UserServiceController(MicroAPI.Sample.Services.IUserService service) { _service = service; } [HttpGet(\"{id}\")] public System.Threading.Tasks.Task<MicroAPI.Sample.Models.User> GetUserAsync([FromRoute] int id) => _service.GetUserAsync(id); [HttpGet(\"\")] public System.Threading.Tasks.Task<System.Collections.Generic.List<MicroAPI.Sample.Models.User>> GetAllUsersAsync() => _service.GetAllUsersAsync(); [HttpPost(\"CreateUserAsync\")] public System.Threading.Tasks.Task<MicroAPI.Sample.Models.User> CreateUserAsync([FromBody] CreateUserAsyncRequest request) => _service.CreateUserAsync(request.name, request.age); [HttpDelete(\"{id}\")] public bool MyDeleteUser([FromRoute] int id) => _service.DeleteUser(id); } } // UserServiceDtos.g.cs using System; namespace MyApp.Api.Models { public record CreateUserAsyncRequest(string name, int age); } Advanced Configuration Custom Controller Name [HttpFacade(\"CustomName\")] public interface IUserService { ... } Custom Namespaces [HttpFacade(ControllerNamespace = \"MyApp.Api.Controllers\", DtoNamespace = \"MyApp.Api.Models\")] public interface IUserService { ... } Custom Method Name [Get(MethodName = \"FindById\")] Task<User> GetUserAsync(int id); Background and Motivation With the rise of microservices, Domain-Driven Design (DDD), and similar architectures, Controller layers have become increasingly thin. In some microservice clusters, unified gateways and middleware handle responses. In these systems, each endpoint often simply forwards requests to a Service, no longer strictly following RESTful conventions or fully utilizing HttpStatusCode semantics. In fact, HttpStatusCode semantics are often insufficient to express rich business scenarios, making these APIs more like WebRPC. MicroAPI.Net was created to address these challenges in ASP.NET Core API development: Repetitive Controller Code: Traditional API controllers often contain significant boilerplate code that merely forwards requests to the service layer. Separation of Concerns: Maintaining a clear separation between API contracts and business logic implementation is challenging with standard controller patterns. API Consistency: Ensuring consistent API design across multiple controllers and endpoints is difficult without standardized approaches. Maintenance Cost: Changes to service interfaces typically require corresponding controller code changes, potentially leading to inconsistencies. MicroAPI.Net addresses these issues by automatically generating controller code from service interfaces or facade classes, ensuring the API layer accurately reflects service contracts while eliminating boilerplate code. Contributing Contributions are welcome! Please see the Contributing Guidelines for details. License This project is licensed under the MIT License - see the LICENSE file for details."
  }
}